Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: I have a black medium dot and small light dot to its left.
Type: New question.
Dots: a,b,
Save dots: