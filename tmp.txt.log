{"action_status": "started", "timestamp": 1684873190.8257651, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [1]}
{"action_status": "started", "timestamp": 1684873193.4381309, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light"}, "action_status": "started", "timestamp": 1684873193.4382238, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873193.439142, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nDo you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873193.439195, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.4096692, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.410346, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.411663, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873197.4119601, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873197.429618, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.431971, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.433867, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4358149, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4374359, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.439084, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.440495, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873197.450635, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.450749, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.94274, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n", "action_status": "started", "timestamp": 1684873209.944694, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9460008, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.946162, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873209.9545941, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873209.9548259, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.962085, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873209.96226, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9724422, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "[]\n", "action_status": "started", "timestamp": 1684873209.9725928, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.972746, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.97288, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.084661, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1684873210.084775, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.086256, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873210.086329, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842137, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1684873210.842467, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842635, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873210.842793, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.852399, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             {"action_status": "started", "timestamp": 1684873190.8257651, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [1]}
{"action_status": "started", "timestamp": 1684873193.4381309, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light"}, "action_status": "started", "timestamp": 1684873193.4382238, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873193.439142, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nDo you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873193.439195, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.4096692, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.410346, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.411663, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873197.4119601, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873197.429618, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.431971, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.433867, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4358149, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4374359, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.439084, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.440495, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873197.450635, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.450749, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.94274, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n", "action_status": "started", "timestamp": 1684873209.944694, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9460008, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.946162, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873209.9545941, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873209.9548259, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.962085, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873209.96226, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9724422, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "[]\n", "action_status": "started", "timestamp": 1684873209.9725928, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.972746, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.97288, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.084661, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1684873210.084775, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.086256, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873210.086329, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842137, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1684873210.842467, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842635, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873210.842793, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.852399, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       {"action_status": "started", "timestamp": 1684873190.8257651, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [1]}
{"action_status": "started", "timestamp": 1684873193.4381309, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light"}, "action_status": "started", "timestamp": 1684873193.4382238, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873193.439142, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nDo you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873193.439195, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.4096692, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.410346, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.411663, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873197.4119601, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873197.429618, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.431971, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.433867, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4358149, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4374359, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.439084, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.440495, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873197.450635, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.450749, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.94274, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n", "action_status": "started", "timestamp": 1684873209.944694, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9460008, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.946162, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873209.9545941, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873209.9548259, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.962085, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873209.96226, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9724422, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "[]\n", "action_status": "started", "timestamp": 1684873209.9725928, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.972746, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.97288, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.084661, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1684873210.084775, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.086256, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873210.086329, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842137, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1684873210.842467, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842635, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873210.842793, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.852399, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {"action_status": "started", "timestamp": 1684873190.8257651, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [1]}
{"action_status": "started", "timestamp": 1684873193.4381309, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light"}, "action_status": "started", "timestamp": 1684873193.4382238, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873193.439142, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nDo you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873193.439195, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.4096692, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.410346, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873197.411663, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873197.4119601, "task_uuid": "9fa3908b-db9a-465e-8e93-225dec67df71", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873197.429618, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.431971, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.433867, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4358149, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4374359, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.439084, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.440495, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873197.450635, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.450749, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.94274, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n", "action_status": "started", "timestamp": 1684873209.944694, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9460008, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.946162, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873209.9545941, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873209.9548259, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.962085, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873209.96226, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9724422, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "[]\n", "action_status": "started", "timestamp": 1684873209.9725928, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.972746, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.97288, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.084661, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1684873210.084775, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.086256, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873210.086329, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842137, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1684873210.842467, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842635, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873210.842793, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.852399, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.4374359, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.439084, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'past\\': [], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873197.429866', \"'task_uuid'\": \"'aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873197.440495, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873197.450635, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "action_status": "started", "timestamp": 1684873197.450749, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.94274, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n", "action_status": "started", "timestamp": 1684873209.944694, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9460008, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.946162, "task_uuid": "aca14af4-5cfe-4cdd-9e22-18aa2d7f43ed", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873209.9545941, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873209.9548259, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.962085, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873209.96226, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.9724422, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "[]\n", "action_status": "started", "timestamp": 1684873209.9725928, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873209.972746, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873209.97288, "task_uuid": "9746eeac-d838-4146-89f1-2a06aba07aa8", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.084661, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1684873210.084775, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.086256, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873210.086329, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842137, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1684873210.842467, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873210.842635, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873210.842793, "task_uuid": "21a54244-1bb0-4b62-9e95-50f502b5455c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873210.852399, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.853465, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8545809, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.8556979, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.85672, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.857731, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873210.852522', \"'task_uuid'\": \"'1eeb6f28-123d-49d6-9054-b994c6dee979'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873210.858869, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873210.864417, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.", "action_status": "started", "timestamp": 1684873210.8645298, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.606113, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # No op.\n    return None\n", "action_status": "started", "timestamp": 1684873224.606452, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.6066592, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.606842, "task_uuid": "1eeb6f28-123d-49d6-9054-b994c6dee979", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873224.6148741, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873224.6151, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.622884, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873224.623042, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633145, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None\n", "action_status": "started", "timestamp": 1684873224.63329, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.633427, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873224.633717, "task_uuid": "9c4a3e4b-c266-4e97-aa72-d64388ae95a3", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873224.6338718, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1684873224.6339788, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873224.635592, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Sort of.\nDo they see what you asked about?\nConfirmation: None\n\nThem: I don't see that.\nDo they see what you asked about?\nConfirmation: No\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1684873224.6357481, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.317504, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1684873226.318159, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873226.318444, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873226.318794, "task_uuid": "d6e6f0c9-2a15-4759-b0ed-ea8a7a3a7e0b", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873228.142154, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot below those?"}, "action_status": "started", "timestamp": 1684873228.1422698, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873228.143023, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot below those?\nReformat the text. Do not change the words or punctuation, but do remove <eos>.\nAnswer:\n", "action_status": "started", "timestamp": 1684873228.1430862, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.214935, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.215393, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873230.215662, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873230.215909, "task_uuid": "51ae93e7-f5fd-44e9-a238-b65d64da72dd", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1684873230.232975, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.235302, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.238295, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [4], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.240156, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [5], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.2422369, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [6], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.244097, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [7], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'dialogue\\': 0, \\'turn\\': 0, \\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 1, \\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[0]\\'}, {\\'dialogue\\': 0, \\'turn\\': 2, \\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 3, \\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 4, \\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 5, \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\', \\'state\\': \\'states[4]\\'}, {\\'dialogue\\': 0, \\'turn\\': 6, \\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 0, \\'turn\\': 7, \\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[6]\\'}, {\\'dialogue\\': 0, \\'turn\\': 8, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\', \\'state\\': \\'states[7]\\'}, {\\'dialogue\\': 0, \\'turn\\': 9, \\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[8]\\'}, {\\'dialogue\\': 1, \\'turn\\': 0, \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 1, \\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 2, \\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\', \\'state\\': \\'states[1]\\'}, {\\'dialogue\\': 1, \\'turn\\': 3, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}, {\\'dialogue\\': 1, \\'turn\\': 4, \\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\', \\'state\\': \\'None\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot below those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x,y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_top_left = x == get_top_left([x,y], ctx)\\\\n                check_x_small = is_small(x, ctx)\\\\n                check_x_light = is_light(x, ctx)\\\\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_light = is_light(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x,y], ctx)\\'}, {\\'name\\': \\'check_x_small\\', \\'code\\': \\'is_small(x, ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_bottom_right\\', \\'code\\': \\'y == get_bottom_right([x,y], ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_light\\', \\'code\\': \\'is_light(y, ctx)\\'}], \\'dots\\': \\'x,y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\\', \\'state\\': \\'None\\'}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'state\\': None}], \\'view\\': array([[-0.635     ,  0.685     , -0.66666667,  0.34666667],\\n       [ 0.035     ,  0.225     , -0.66666667,  0.77333333],\\n       [ 0.02      , -0.085     ,  0.33333333,  0.12      ],\\n       [ 0.81      ,  0.565     , -0.66666667,  0.61333333],\\n       [ 0.685     , -0.39      , -1.        ,  0.64      ],\\n       [ 0.48      , -0.41      , -0.66666667,  0.02666667],\\n       [ 0.015     , -0.68      ,  0.33333333,  0.25333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1684873230.2332249', \"'task_uuid'\": \"'4487f568-bb02-424c-9e4c-b3f94f1d4098'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1684873230.245535, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "task_level": [8], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1684873230.256207, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[0]\n# End.\n\n# Turn: 2\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n    return True\n# Dots: x, y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 3\n# You: No.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 5\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n    return True\n# Dots: a,x\n# Selection: False\n# State: states[4]\n# End.\n\n# Turn: 6\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 7\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[6]\n# End.\n\n# Turn: 8\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n    return True\n# Dots: a,b,c\n# Selection: False\n# State: states[7]\n# End.\n\n# Turn: 9\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[8]\n# End.\n\n# Turn: 0\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n    return True\n# Dots: x,y,z\n# Selection: False\n# State: None\n# End.\n\n# Turn: 2\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n    return True\n# Dots: a\n# Selection: True\n# State: states[1]\n# End.\n\n# Turn: 3\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 4\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn: 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n    return True\n# Dots: x,y\n# Selection: False\n# State: None\n# End.\n\n# Turn: 1\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return None\n# End.\n\n# Turn: 2\n# You: Is there a medium-sized and grey-colored dot below those?", "action_status": "started", "timestamp": 1684873230.256334, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.2900019, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Prompted", "task_level": [9, 2]}
{"result": "\n def turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n    return True\n# Dots: x\n# Selection: False\n# State: states[0]\n", "action_status": "started", "timestamp": 1684873244.2908459, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.292531, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "Result", "task_level": [10, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.2928262, "task_uuid": "4487f568-bb02-424c-9e4c-b3f94f1d4098", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [11]}
{"action_status": "started", "timestamp": 1684873244.303978, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_top_left", "code": "x == get_top_left([x,y], ctx)"}, {"name": "check_x_small", "code": "is_small(x, ctx)"}, {"name": "check_x_light", "code": "is_light(x, ctx)"}, {"name": "check_y_bottom_right", "code": "y == get_bottom_right([x,y], ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_light", "code": "is_light(y, ctx)"}], "dots": "x,y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?", "state": "None"}, {"noop": true, "speaker": "Them", "text": "Yes.", "state": null}, {"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)", "constraints": [{"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_grey", "code": "is_grey(x, ctx)"}, {"name": "check_x_below_xy", "code": "is_below(x, [x,y], ctx)"}], "dots": "x,", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot below those?", "state": "states[0]"}], "dots": [[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]]}, "action_status": "started", "timestamp": 1684873244.3042629, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.3127081, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[-0.635, 0.685, -0.6666666666666666, 0.3466666666666667], [0.035, 0.225, -0.6666666666666666, 0.7733333333333333], [0.02, -0.085, 0.3333333333333333, 0.12], [0.81, 0.565, -0.6666666666666666, 0.6133333333333333], [0.685, -0.39, -1.0, 0.64], [0.48, -0.41, -0.6666666666666666, 0.02666666666666667], [0.015, -0.68, 0.3333333333333333, 0.25333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and light?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x,y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_top_left = x == get_top_left([x,y], ctx)\n                check_x_small = is_small(x, ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_bottom_right = y == get_bottom_right([x,y], ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_light = is_light(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_top_left\n                    and check_x_small\n                    and check_x_light\n                    and check_y_bottom_right\n                    and check_y_small\n                    and check_y_light\n                    \n                ):\n                    dots = frozenset([x,y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return None\nstate = None if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot below those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_below_xy = is_below(x, [x,y], ctx)\n                if (\n                    True \n                    and check_x_medium\n                    and check_x_grey\n                    and check_x_below_xy\n                    \n                ):\n                    dots = frozenset([x,])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nif states[-1] is not None:\n    print([tuple(x) for x in states[-1]])\nelse:\n    print(\"None\")", "action_status": "started", "timestamp": 1684873244.312874, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.323989, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1684873244.324129, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1684873244.324262, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1684873244.3243651, "task_uuid": "5cb2b04c-3b44-4ddb-a398-157c1005a3f2", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "succeeded", "timestamp": 1684873244.4017332, "task_uuid": "7819abae-085f-4c35-af61-f3b1d6365719", "action_type": "tmp.txt", "task_level": [2]}
