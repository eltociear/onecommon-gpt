{"action_status": "started", "timestamp": 1683863381.035194, "task_uuid": "9a4d459b-ba67-4e70-8942-733b2ce5f1ad", "action_type": "tmp.txt", "task_level": [1]}
{"action_status": "started", "timestamp": 1683863383.151773, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is small-sized and dark"}, "action_status": "started", "timestamp": 1683863383.1518323, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863383.1524444, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nDo you see a pair of dots, where the right dot is medium-sized and dark and the left dot is small-sized and dark\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863383.1524813, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863385.5942163, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "action_status": "started", "timestamp": 1683863385.5944564, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863385.594618, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863385.594718, "task_uuid": "ed1ca3f2-9307-4b1d-aa67-8c837362b39c", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863385.600301, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'past\\': [], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863385.600339', \"'task_uuid'\": \"'5a6a6127-20b0-4058-8118-a0e282bb2b0b'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863385.600829, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'past\\': [], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863385.600339', \"'task_uuid'\": \"'5a6a6127-20b0-4058-8118-a0e282bb2b0b'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863385.6012063, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863385.604532, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "action_status": "started", "timestamp": 1683863385.6045697, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.7522616, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: x, y\n# Selection: False\n", "action_status": "started", "timestamp": 1683863407.7523265, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.75259, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863407.7526302, "task_uuid": "5a6a6127-20b0-4058-8118-a0e282bb2b0b", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863407.7559602, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863407.7560265, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.7590032, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863407.7590652, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.7626758, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863407.762746, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.7627952, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863407.762817, "task_uuid": "0ef5d21a-9331-49d0-a511-09940324076b", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863407.8407466, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1683863407.8408103, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863407.8414454, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863407.8414845, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863408.5279846, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1683863408.5282319, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863408.5283608, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863408.5284636, "task_uuid": "c590e73c-ad88-4989-9a65-e5762f6727c4", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863408.5549974, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863408.55523', \"'task_uuid'\": \"'aa2d9e82-6cee-49fe-b810-de8696fd03b6'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863408.5571768, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863408.55523', \"'task_uuid'\": \"'aa2d9e82-6cee-49fe-b810-de8696fd03b6'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863408.5586789, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863408.5692508, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.", "action_status": "started", "timestamp": 1683863408.5693629, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2158864, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # No op.\n    return [None]\n", "action_status": "started", "timestamp": 1683863412.2159846, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2160382, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863412.2160823, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863412.2189298, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863412.2189848, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2216349, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863412.2216957, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2251143, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863412.2251987, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2252629, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863412.225288, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863412.2253444, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1683863412.225369, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2259839, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1683863412.2260222, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.217693, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1683863413.2178657, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.218015, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863413.2180986, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863413.9404838, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot above those?"}, "action_status": "started", "timestamp": 1683863413.9405491, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.9411652, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot above those?\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863413.941203, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863415.320064, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot above those?", "action_status": "started", "timestamp": 1683863415.3202286, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863415.3203268, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863415.3204095, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863415.331895, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863415.3319924', \"'task_uuid'\": \"'24634903-cd98-4f10-b8dc-a7a74f7946bb'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863415.3332102, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863415.3319924', \"'task_uuid'\": \"'24634903-cd98-4f10-b8dc-a7a74f7946bb'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863415.3342028, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863415.342155, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?", "action_status": "started", "timestamp": 1683863415.3422308, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.552666, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: x, y, z\n# Selection: False\n", "action_status": "started", "timestamp": 1683863435.552917, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5537832, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863435.5539978, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863435.5580437, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}, {"noop": false, "code": "    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)", "constraints": [{"name": "check_z_medium", "code": "is_medium_size(z, ctx)"}, {"name": "check_z_grey", "code": "is_grey(z, ctx)"}, {"name": "check_z_above_xy", "code": "is_above(z, [x, y], ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot above those?", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863435.55808, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.560402, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n                if (\n                    True \n                    and check_z_medium\n                    and check_z_grey\n                    and check_z_above_xy\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863435.560438, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5637176, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863435.5637577, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5637946, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863435.5638163, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863435.6445315, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1683863435.644588, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.6452024, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863435.6452405, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863436.261236, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1683863436.2613523, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863436.2614117, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863436.2614582, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863436.2710922, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863436.2712073', \"'task_uuid'\": \"'667f6bf9-31c1-4a44-8586-1bffef673e97'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863436.2726808, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863436.2712073', \"'task_uuid'\": \"'667f6bf9-31c1-4a44-8586-1bffef673e97'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863436.2739081, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863436.2844617, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.", "action_status": "started", "timestamp": 1683863436.2845986, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.0621064, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # No op.\n    return [None]\n", "action_status": "started", "timestamp": 1683863441.062348, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.062478, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863441.0625763, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863441.078676, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}, {"noop": false, "code": "    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)", "constraints": [{"name": "check_z_medium", "code": "is_medium_size(z, ctx)"}, {"name": "check_z_grey", "code": "is_grey(z, ctx)"}, {"name": "check_z_above_xy", "code": "is_above(z, [x, y], ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot above those?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863441.07889, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.0935454, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n                if (\n                    True \n                    and check_z_medium\n                    and check_z_grey\n                    and check_z_above_xy\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 3\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863441.093796, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.10352, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863441.103637, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.1037273, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863441.1037776, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863441.1038804, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1683863441.1039345, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.1050718, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1683863441.1051538, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.374723, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1683863442.3749506, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.3750792, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863442.3752105, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863442.379247, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Let's select the medium size and grey color one on the above."}, "action_status": "started", "timestamp": 1683863442.3792818, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.3798544, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nLet's select the medium size and grey color one on the above.\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863442.3798902, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863443.6067693, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Let's select the medium size and grey color one above.", "action_status": "started", "timestamp": 1683863443.6070046, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863443.60713, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863443.6072292, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863443.6280007, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \"Let\\'s select the medium size and grey color one above.\", \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863443.628204', \"'task_uuid'\": \"'4fc2b825-f948-4e0e-aea6-20b432099c78'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863443.6308475, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \"Let\\'s select the medium size and grey color one above.\", \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863443.628204', \"'task_uuid'\": \"'4fc2b825-f948-4e0e-aea6-20b432099c78'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863443.6331244, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863443.6452234, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: Let's select the medium size and grey color one above.", "action_status": "started", "timestamp": 1683863443.6453302, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "Prompted", "task_level": [5, 1]}
\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863408.55523', \"'task_uuid'\": \"'aa2d9e82-6cee-49fe-b810-de8696fd03b6'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863408.5571768, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863408.55523', \"'task_uuid'\": \"'aa2d9e82-6cee-49fe-b810-de8696fd03b6'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863408.5586789, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863408.5692508, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.", "action_status": "started", "timestamp": 1683863408.5693629, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2158864, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # No op.\n    return [None]\n", "action_status": "started", "timestamp": 1683863412.2159846, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2160382, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863412.2160823, "task_uuid": "aa2d9e82-6cee-49fe-b810-de8696fd03b6", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863412.2189298, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863412.2189848, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2216349, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863412.2216957, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2251143, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863412.2251987, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2252629, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863412.225288, "task_uuid": "56865615-2784-402d-bb95-ffd0259a0a64", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863412.2253444, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1683863412.225369, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863412.2259839, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1683863412.2260222, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.217693, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1683863413.2178657, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.218015, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863413.2180986, "task_uuid": "610bf3b1-415e-4250-9b42-15d4c2953ac6", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863413.9404838, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Is there a medium size and grey color dot above those?"}, "action_status": "started", "timestamp": 1683863413.9405491, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863413.9411652, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nIs there a medium size and grey color dot above those?\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863413.941203, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863415.320064, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Is there a medium-sized and grey-colored dot above those?", "action_status": "started", "timestamp": 1683863415.3202286, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863415.3203268, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863415.3204095, "task_uuid": "5dd77d8c-2923-48f0-830e-606d9d6801d8", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863415.331895, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863415.3319924', \"'task_uuid'\": \"'24634903-cd98-4f10-b8dc-a7a74f7946bb'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863415.3332102, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863415.3319924', \"'task_uuid'\": \"'24634903-cd98-4f10-b8dc-a7a74f7946bb'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863415.3342028, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863415.342155, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?", "action_status": "started", "timestamp": 1683863415.3422308, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.552666, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: x, y, z\n# Selection: False\n", "action_status": "started", "timestamp": 1683863435.552917, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5537832, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863435.5539978, "task_uuid": "24634903-cd98-4f10-b8dc-a7a74f7946bb", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863435.5580437, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}, {"noop": false, "code": "    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)", "constraints": [{"name": "check_z_medium", "code": "is_medium_size(z, ctx)"}, {"name": "check_z_grey", "code": "is_grey(z, ctx)"}, {"name": "check_z_above_xy", "code": "is_above(z, [x, y], ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot above those?", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863435.55808, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.560402, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n                if (\n                    True \n                    and check_z_medium\n                    and check_z_grey\n                    and check_z_above_xy\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863435.560438, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5637176, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863435.5637577, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.5637946, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863435.5638163, "task_uuid": "4fdf653f-11be-4585-a214-cd9fbead25cf", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863435.6445315, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Yes"}, "action_status": "started", "timestamp": 1683863435.644588, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863435.6452024, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nYes\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863435.6452405, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863436.261236, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes.", "action_status": "started", "timestamp": 1683863436.2613523, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863436.2614117, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863436.2614582, "task_uuid": "68e99dd8-d041-419a-93dc-555e9a922e82", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863436.2710922, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863436.2712073', \"'task_uuid'\": \"'667f6bf9-31c1-4a44-8586-1bffef673e97'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863436.2726808, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863436.2712073', \"'task_uuid'\": \"'667f6bf9-31c1-4a44-8586-1bffef673e97'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863436.2739081, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863436.2844617, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.", "action_status": "started", "timestamp": 1683863436.2845986, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Prompted", "task_level": [5, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.0621064, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Prompted", "task_level": [5, 2]}
{"result": "def turn(state):\n    # No op.\n    return [None]\n", "action_status": "started", "timestamp": 1683863441.062348, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Result", "task_level": [6, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.062478, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "Result", "task_level": [6, 2]}
{"action_status": "succeeded", "timestamp": 1683863441.0625763, "task_uuid": "667f6bf9-31c1-4a44-8586-1bffef673e97", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [7]}
{"action_status": "started", "timestamp": 1683863441.078676, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [1]}
{"input": {"info": null, "header": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n", "blocks": [{"noop": false, "code": "    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)", "constraints": [{"name": "check_xy_pair", "code": "all_close([x,y], ctx)"}, {"name": "check_x_right", "code": "is_right(x, y, ctx)"}, {"name": "check_x_medium", "code": "is_medium_size(x, ctx)"}, {"name": "check_x_dark", "code": "is_dark(x, ctx)"}, {"name": "check_y_left", "code": "is_left(y, x, ctx)"}, {"name": "check_y_small", "code": "is_small(y, ctx)"}, {"name": "check_y_dark", "code": "is_dark(y, ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}, {"noop": false, "code": "    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)", "constraints": [{"name": "check_z_medium", "code": "is_medium_size(z, ctx)"}, {"name": "check_z_grey", "code": "is_grey(z, ctx)"}, {"name": "check_z_above_xy", "code": "is_above(z, [x, y], ctx)"}], "dots": "config,x, y", "select": "False", "speaker": "You", "text": "Is there a medium-sized and grey-colored dot above those?", "idx": 0}, {"noop": true, "speaker": "Them", "text": "Yes.", "idx": 0}], "dots": [[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]]}, "action_status": "started", "timestamp": 1683863441.07889, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.0935454, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "\n\nfrom oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\ndef get_ctx():\n    ctx = np.array([[0.645, -0.33, 0.3333333333333333, -0.88], [0.5, 0.505, 0.6666666666666666, -0.9733333333333334], [-0.275, -0.505, 0.3333333333333333, -0.6133333333333333], [-0.24, -0.105, -0.6666666666666666, 0.10666666666666667], [-0.63, -0.585, -1.0, -0.3466666666666667], [-0.59, -0.04, 0.0, -0.013333333333333334], [-0.245, 0.855, -0.6666666666666666, -0.37333333333333335]])\n    return ctx\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Turn 0\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n                if (\n                    True \n                    and check_xy_pair\n                    and check_x_right\n                    and check_x_medium\n                    and check_x_dark\n                    and check_y_left\n                    and check_y_small\n                    and check_y_dark\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 1\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 2\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    results = set()\n    orderedresults = []\n    parents = []\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n                if (\n                    True \n                    and check_z_medium\n                    and check_z_grey\n                    and check_z_above_xy\n                    \n                ):\n                    dots = frozenset([config,x, y])\n                    if dots not in results:\n                        results.add(dots)\n                        orderedresults.append(dots)\n                        parents.append(config)\n    return sort_state(orderedresults, parents, ctx, select=False)\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n# Turn 3\n# Them: Yes.\ndef turn(state): return [None]\nstate = states[0] if len(states) > 0 else None\nstates.append(turn(state))\n\n\nprint([tuple(x) for x in states[-1]])", "action_status": "started", "timestamp": 1683863441.093796, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.10352, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "None", "action_status": "started", "timestamp": 1683863441.103637, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.1037273, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863441.1037776, "task_uuid": "c37db937-dab8-47aa-a3a2-a4e70e7a4313", "action_type": "<class 'oc.prompt.ExecuteShort'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863441.1038804, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [1]}
{"input": {"text": "Yes."}, "action_status": "started", "timestamp": 1683863441.1039345, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863441.1050718, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Them: Got a triangle of 3 light grey dots by itself.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: None\n\nThem: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Yes. Is the top one close to the middle darker one?\nDo they see what you asked about?\nConfirmation: Yes\n\nThem: No.\nDo they see what you asked about?\nConfirmation: No\n\nThem: Do you see a pair of dark dots, where the top left is larger and the bottom is smaller.\nDo they see what you asked about?\nConfirmation: None\n\nYes.\nDo they see what you asked about?\nConfirmation:", "action_status": "started", "timestamp": 1683863441.1051538, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.374723, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Yes", "action_status": "started", "timestamp": 1683863442.3749506, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.3750792, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863442.3752105, "task_uuid": "f20beb7e-9ca7-415e-8c67-8315b952cd1a", "action_type": "<class 'oc.prompt.Confirm'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863442.379247, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [1]}
{"input": {"source": "Let's select the medium size and grey color one on the above."}, "action_status": "started", "timestamp": 1683863442.3792818, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Input Function", "task_level": [2, 1]}
{"action_status": "succeeded", "timestamp": 1683863442.3798544, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "Text:\nyes ! lightest on all the way to the right ? if so click that one ! <selection>\nReformat the text. Do not change the words.\nAnswer:\nYes! If you want the lightest, click the one all the way to the right? <selection>.\n\nText:\nlarge black next to tint light\nReformat the text. Do not change the words.\nAnswer:\nLarge black next to tiny light.\n\nText:\ni have a light grey small dot next to a medium grey medium dot\nReformat the text. Do not change the words.\nAnswer:\nI have a light grey small dot next to a medium grey medium dot.\n\nText:\ntwo small dots almost identical in size close together in diagonal line ?\nReformat the text. Do not change the words.\nAnswer:\nTwo small dots, almost identical in size, close together in a diagonal line?\n\nText:\nokay <selection>\nReformat the text. Do not change the words.\nAnswer:\nOkay. <selection>.\n\nText:\nLet's select the medium size and grey color one on the above.\nReformat the text. Do not change the words.\nAnswer:\n", "action_status": "started", "timestamp": 1683863442.3798902, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Prompted", "task_level": [3, 1]}
{"action_status": "succeeded", "timestamp": 1683863443.6067693, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Prompted", "task_level": [3, 2]}
{"result": "Let's select the medium size and grey color one above.", "action_status": "started", "timestamp": 1683863443.6070046, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Result", "task_level": [4, 1]}
{"action_status": "succeeded", "timestamp": 1683863443.60713, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "Result", "task_level": [4, 2]}
{"action_status": "succeeded", "timestamp": 1683863443.6072292, "task_uuid": "b9be9836-2924-484e-b0c9-6c1c87399da7", "action_type": "<class 'oc.prompt.Reformat'>", "task_level": [5]}
{"action_status": "started", "timestamp": 1683863443.6280007, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "<class 'oc.prompt.UnderstandShort'>", "task_level": [1]}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \"Let\\'s select the medium size and grey color one above.\", \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863443.628204', \"'task_uuid'\": \"'4fc2b825-f948-4e0e-aea6-20b432099c78'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863443.6308475, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "task_level": [3], "message_type": "eliot:destination_failure"}
{"reason": "module 'numpy' has no attribute 'bool'.\n`np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations", "exception": "builtins.AttributeError", "message": "{\"'input'\": '{\\'header\\': \\'from oc.fns.context import get_ctx\\\\nfrom oc.fns.shapes import is_triangle, is_line, is_square\\\\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\\\\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\\\\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\\\\nfrom oc.fns.spatial import get_middle\\\\nfrom oc.fns.spatial import get_distance, get_minimum_radius\\\\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\\\\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\\\\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\\\\nfrom oc.fns.lists import add\\\\nfrom oc.fns.lists import sort_state\\\\nimport numpy as np\\\\nfrom functools import partial\\\\nfrom itertools import permutations\\\\n\\', \\'blocks\\': [{\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Got a triangle of 3 light grey dots by itself.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_triangle\\', \\'code\\': \\'is_triangle([x,y,z], ctx)\\'}, {\\'name\\': \\'check_xyz_light\\', \\'code\\': \\'all([is_light(dot, ctx) for dot in [x,y,z]])\\'}, {\\'name\\': \\'check_xyz_alone\\', \\'code\\': \\'all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Could be. One on right is largest with a tiny gray on top??\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_right\\', \\'code\\': \\'a == get_right([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == largest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_tiny\\', \\'code\\': \\'is_small(b, ctx)\\'}, {\\'name\\': \\'check_b_grey\\', \\'code\\': \\'is_grey(b, ctx)\\'}, {\\'name\\': \\'check_b_top\\', \\'code\\': \\'b == get_top([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 2)\\', \\'configdots\\': \\'x, y\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_xy_dark\\', \\'code\\': \\'is_dark(x, ctx) and is_dark(y, ctx)\\'}, {\\'name\\': \\'check_y_right_x\\', \\'code\\': \\'is_right(y, x, ctx)\\'}, {\\'name\\': \\'check_y_above_x\\', \\'code\\': \\'is_above(y, x, ctx)\\'}, {\\'name\\': \\'check_xy_same_size\\', \\'code\\': \\'same_size([x,y], ctx)\\'}], \\'dots\\': \\'x, y\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'No.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'What about a large medium grey dot near the center?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_grey\\', \\'code\\': \\'is_grey(x, ctx)\\'}, {\\'name\\': \\'check_x_center\\', \\'code\\': \\'is_middle(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Is there a smaller black one next to it?\\', \\'type\\': \\'Follow up question, new dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,\\', \\'newconfigs\\': \\'get1idxs(idxs, exclude=[a])\\', \\'newdots\\': \\'x,\\', \\'constraints\\': [{\\'name\\': \\'check_x_smaller_a\\', \\'code\\': \\'is_smaller(x, a, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_next_to_a\\', \\'code\\': \\'all_close([a,x], ctx)\\'}], \\'dots\\': \\'a,x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_line\\', \\'code\\': \\'is_line([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_top_left\\', \\'code\\': \\'x == get_top_left([x, y, z], ctx)\\'}, {\\'name\\': \\'check_x_light\\', \\'code\\': \\'is_light(x, ctx)\\'}, {\\'name\\': \\'check_y_middle\\', \\'code\\': \\'is_middle(y, [x,y,z], ctx)\\'}, {\\'name\\': \\'check_y_grey\\', \\'code\\': \\'is_grey(y, ctx)\\'}, {\\'name\\': \\'check_z_bottom_right\\', \\'code\\': \\'z == get_bottom_right([x, y, z], ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Yes. Is the top one close to the middle darker one?\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_top\\', \\'code\\': \\'a == get_top([a,b,c], ctx)\\'}, {\\'name\\': \\'check_b_middle\\', \\'code\\': \\'b == get_middle([a,b,c], ctx)\\'}, {\\'name\\': \\'check_ab_close\\', \\'code\\': \\'all_close([a, b], ctx)\\'}, {\\'name\\': \\'check_b_darker_a\\', \\'code\\': \\'is_darker(b, a, ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes. And the smallest is on the bottom right.\\', \\'type\\': \\'Follow up question.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_smallest\\', \\'code\\': \\'a == smallest([a,b,c], ctx)\\'}, {\\'name\\': \\'check_a_bottom_right\\', \\'code\\': \\'a == get_bottom_right([a,b,c], ctx)\\'}], \\'dots\\': \\'a,b,c\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \"Yes, let\\'s select the large one. <selection>.\", \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_large\\', \\'code\\': \\'is_large(a, ctx)\\'}, {\\'name\\': \\'check_b_not_large\\', \\'code\\': \\'not is_large(b, ctx)\\'}, {\\'name\\': \\'check_c_not_large\\', \\'code\\': \\'not is_large(c, ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a large black dot on the bottom left?\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 1)\\', \\'configdots\\': \\'x,\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_x_below_left\\', \\'code\\': \\'is_below(x, None, ctx) and is_left(x, None, ctx)\\'}], \\'dots\\': \\'x\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\\', \\'type\\': \\'New question.\\', \\'configs\\': \\'getsets(idxs, 3)\\', \\'configdots\\': \\'x,y,z\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_xyz_close\\', \\'code\\': \\'all_close([x,y,z], ctx)\\'}, {\\'name\\': \\'check_x_large\\', \\'code\\': \\'is_large(x, ctx)\\'}, {\\'name\\': \\'check_z_dark\\', \\'code\\': \\'is_dark(z, ctx)\\'}, {\\'name\\': \\'check_y_smaller_x\\', \\'code\\': \\'is_smaller(y, x, ctx)\\'}, {\\'name\\': \\'check_z_smaller_x\\', \\'code\\': \\'is_smaller(z, x, ctx)\\'}, {\\'name\\': \\'check_y_lighter_x\\', \\'code\\': \\'is_lighter(y, x, ctx)\\'}, {\\'name\\': \\'check_z_lighter_x\\', \\'code\\': \\'is_lighter(z, x, ctx)\\'}, {\\'name\\': \\'check_yz_same_size\\', \\'code\\': \\'same_size([y,z], ctx)\\'}, {\\'name\\': \\'check_yz_same_color\\', \\'code\\': \\'same_color([y,z], ctx)\\'}], \\'dots\\': \\'x,y,z\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Select the largest one.\\', \\'type\\': \\'Select a dot.\\', \\'configs\\': \\'state\\', \\'configdots\\': \\'a,b,c\\', \\'newconfigs\\': \\'[0]\\', \\'newdots\\': \\'_\\', \\'constraints\\': [{\\'name\\': \\'check_a_largest\\', \\'code\\': \\'a == get_largest([a,b,c], ctx)\\'}], \\'dots\\': \\'a\\', \\'select\\': \\'True\\'}, {\\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}, {\\'speaker\\': \\'You\\', \\'text\\': \\'Okay. <selection>.\\', \\'type\\': \\'No op.\\', \\'select\\': \\'False\\'}], \\'speaker\\': \\'Them\\', \\'text\\': \"Let\\'s select the medium size and grey color one above.\", \\'past\\': [{\\'noop\\': False, \\'code\\': \\'    # New question.\\\\n    for config in getsets(idxs, 2):\\\\n        for x, y in permutations(config):\\\\n            for _ in [0]:\\\\n                check_xy_pair = all_close([x,y], ctx)\\\\n                check_x_right = is_right(x, y, ctx)\\\\n                check_x_medium = is_medium_size(x, ctx)\\\\n                check_x_dark = is_dark(x, ctx)\\\\n                check_y_left = is_left(y, x, ctx)\\\\n                check_y_small = is_small(y, ctx)\\\\n                check_y_dark = is_dark(y, ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_xy_pair\\', \\'code\\': \\'all_close([x,y], ctx)\\'}, {\\'name\\': \\'check_x_right\\', \\'code\\': \\'is_right(x, y, ctx)\\'}, {\\'name\\': \\'check_x_medium\\', \\'code\\': \\'is_medium_size(x, ctx)\\'}, {\\'name\\': \\'check_x_dark\\', \\'code\\': \\'is_dark(x, ctx)\\'}, {\\'name\\': \\'check_y_left\\', \\'code\\': \\'is_left(y, x, ctx)\\'}, {\\'name\\': \\'check_y_small\\', \\'code\\': \\'is_small(y, ctx)\\'}, {\\'name\\': \\'check_y_dark\\', \\'code\\': \\'is_dark(y, ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}, {\\'noop\\': False, \\'code\\': \\'    # Follow up question, new dot.\\\\n    for config in state:\\\\n        for x, y in permutations(config):\\\\n            for z, in get1idxs(idxs, exclude=[x, y]):\\\\n                check_z_medium = is_medium_size(z, ctx)\\\\n                check_z_grey = is_grey(z, ctx)\\\\n                check_z_above_xy = is_above(z, [x, y], ctx)\\', \\'constraints\\': [{\\'name\\': \\'check_z_medium\\', \\'code\\': \\'is_medium_size(z, ctx)\\'}, {\\'name\\': \\'check_z_grey\\', \\'code\\': \\'is_grey(z, ctx)\\'}, {\\'name\\': \\'check_z_above_xy\\', \\'code\\': \\'is_above(z, [x, y], ctx)\\'}], \\'dots\\': \\'config,x, y\\', \\'select\\': \\'False\\', \\'speaker\\': \\'You\\', \\'text\\': \\'Is there a medium-sized and grey-colored dot above those?\\', \\'idx\\': 0}, {\\'noop\\': True, \\'speaker\\': \\'Them\\', \\'text\\': \\'Yes.\\', \\'idx\\': 0}], \\'view\\': array([[ 0.645     , -0.33      ,  0.33333333, -0.88      ],\\n       [ 0.5       ,  0.505     ,  0.66666667, -0.97333333],\\n       [-0.275     , -0.505     ,  0.33333333, -0.61333333],\\n       [-0.24      , -0.105     , -0.66666667,  0.10666667],\\n       [-0.63      , -0.585     , -1.        , -0.34666667],\\n       [-0.59      , -0.04      ,  0.        , -0.01333333],\\n       [-0.245     ,  0.855     , -0.66666667, -0.37333333]])}', \"'action_status'\": \"'started'\", \"'timestamp'\": '1683863443.628204', \"'task_uuid'\": \"'4fc2b825-f948-4e0e-aea6-20b432099c78'\", \"'action_type'\": \"'Input Function'\", \"'task_level'\": '[2, 1]'}", "timestamp": 1683863443.6331244, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "task_level": [4], "message_type": "eliot:destination_failure"}
{"action_status": "succeeded", "timestamp": 1683863443.6452234, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "Input Function", "task_level": [2, 2]}
{"prompt": "from oc.fns.context import get_ctx\nfrom oc.fns.shapes import is_triangle, is_line, is_square\nfrom oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle\nfrom oc.fns.spatial import get_top, get_bottom, get_right, get_left\nfrom oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left\nfrom oc.fns.spatial import get_middle\nfrom oc.fns.spatial import get_distance, get_minimum_radius\nfrom oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter\nfrom oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller\nfrom oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets\nfrom oc.fns.lists import add\nfrom oc.fns.lists import sort_state\nimport numpy as np\nfrom functools import partial\nfrom itertools import permutations\n\n\nidxs = list(range(7))\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# Them: Got a triangle of 3 light grey dots by itself.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_triangle = is_triangle([x,y,z], ctx)\n                check_xyz_light = all([is_light(dot, ctx) for dot in [x,y,z]])\n                check_xyz_alone = all([not all_close([x,y,z,dot], ctx) for dot in idxs if dot not in [x,y,z]])\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Could be. One on right is largest with a tiny gray on top??\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_right = a == get_right([a,b,c], ctx)\n                check_a_largest = a == largest([a,b,c], ctx)\n                check_b_tiny = is_small(b, ctx)\n                check_b_grey = is_grey(b, ctx)\n                check_b_top = b == get_top([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_xy_dark = is_dark(x, ctx) and is_dark(y, ctx)\n                check_y_right_x = is_right(y, x, ctx)\n                check_y_above_x = is_above(y, x, ctx)\n                check_xy_same_size = same_size([x,y], ctx)\n# Dots: x, y\n# Selection: False\n# End.\n\n# You: No.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: What about a large medium grey dot near the center?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_grey = is_grey(x, ctx)\n                check_x_center = is_middle(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# You: Is there a smaller black one next to it?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for a, in permutations(config):\n            for x, in get1idxs(idxs, exclude=[a]):\n                check_x_smaller_a = is_smaller(x, a, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_next_to_a = all_close([a,x], ctx)\n# Dots: a,x\n# Selection: False\n# End.\n\n# Them: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_line = is_line([x,y,z], ctx)\n                check_x_top_left = x == get_top_left([x, y, z], ctx)\n                check_x_light = is_light(x, ctx)\n                check_y_middle = is_middle(y, [x,y,z], ctx)\n                check_y_grey = is_grey(y, ctx)\n                check_z_bottom_right = z == get_bottom_right([x, y, z], ctx)\n                check_z_dark = is_dark(z, ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Yes. Is the top one close to the middle darker one?\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_top = a == get_top([a,b,c], ctx)\n                check_b_middle = b == get_middle([a,b,c], ctx)\n                check_ab_close = all_close([a, b], ctx)\n                check_b_darker_a = is_darker(b, a, ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# Them: Yes. And the smallest is on the bottom right.\ndef turn(state):\n    # Follow up question.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_smallest = a == smallest([a,b,c], ctx)\n                check_a_bottom_right = a == get_bottom_right([a,b,c], ctx)\n# Dots: a,b,c\n# Selection: False\n# End.\n\n# You: Yes, let's select the large one. <selection>.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_large = is_large(a, ctx)\n                check_b_not_large = not is_large(b, ctx)\n                check_c_not_large = not is_large(c, ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# You: Do you see a large black dot on the bottom left?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 1):\n        for x, in permutations(config):\n            for _ in [0]:\n                check_x_large = is_large(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_x_below_left = is_below(x, None, ctx) and is_left(x, None, ctx)\n# Dots: x\n# Selection: False\n# End.\n\n# Them: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 3):\n        for x,y,z in permutations(config):\n            for _ in [0]:\n                check_xyz_close = all_close([x,y,z], ctx)\n                check_x_large = is_large(x, ctx)\n                check_z_dark = is_dark(z, ctx)\n                check_y_smaller_x = is_smaller(y, x, ctx)\n                check_z_smaller_x = is_smaller(z, x, ctx)\n                check_y_lighter_x = is_lighter(y, x, ctx)\n                check_z_lighter_x = is_lighter(z, x, ctx)\n                check_yz_same_size = same_size([y,z], ctx)\n                check_yz_same_color = same_color([y,z], ctx)\n# Dots: x,y,z\n# Selection: False\n# End.\n\n# You: Select the largest one.\ndef turn(state):\n    # Select a dot.\n    for config in state:\n        for a,b,c in permutations(config):\n            for _ in [0]:\n                check_a_largest = a == get_largest([a,b,c], ctx)\n# Dots: a\n# Selection: True\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Okay. <selection>.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n\n# New.\nctx = get_ctx()\nstates = []\n\n\n# You: Do you see a pair of dots, where the right dot is medium-sized and dark, and the left dot is small-sized and dark?\ndef turn(state):\n    # New question.\n    for config in getsets(idxs, 2):\n        for x, y in permutations(config):\n            for _ in [0]:\n                check_xy_pair = all_close([x,y], ctx)\n                check_x_right = is_right(x, y, ctx)\n                check_x_medium = is_medium_size(x, ctx)\n                check_x_dark = is_dark(x, ctx)\n                check_y_left = is_left(y, x, ctx)\n                check_y_small = is_small(y, ctx)\n                check_y_dark = is_dark(y, ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# You: Is there a medium-sized and grey-colored dot above those?\ndef turn(state):\n    # Follow up question, new dot.\n    for config in state:\n        for x, y in permutations(config):\n            for z, in get1idxs(idxs, exclude=[x, y]):\n                check_z_medium = is_medium_size(z, ctx)\n                check_z_grey = is_grey(z, ctx)\n                check_z_above_xy = is_above(z, [x, y], ctx)\n# Dots: config,x, y\n# Selection: False\n# End.\n\n# Them: Yes.\ndef turn(state):\n    # No op.\n    return [None]\n# End.\n\n# Them: Let's select the medium size and grey color one above.", "action_status": "started", "timestamp": 1683863443.6453302, "task_uuid": "4fc2b825-f948-4e0e-aea6-20b432099c78", "action_type": "Prompted", "task_level": [5, 1]}
